
/*
 * @FileName        : macro_tmr.h
 * @Author          : zhurengong
 * @Email           : 2731412072@qq.com
 * @Description     : The following are macros owned by timer 0\1(abbr:tmr0\1).
 * 1.Configure the mode of either tmr0\1;  
 * 2.Configure the job to determine whether this periphenal is used by a timer or a counter.
 * 3.Set\Clr the Gate bit of tmr0\1, if it is set to 1, then only when the !INT0\1 keeps high level,
 * tmr0\1 can works;
 * 4.Eanble or disable interrupt of tmr0\1;
 * 5.Configure the priority of tmr0\1;
 * 6.Configure the interval time caculated by the compiler to interrupt request from tmr0\1.
 * 7.Get\Set\Clear the interrupt request flag generated by the overflow of tmr0\1;
 * 8.Start or stop the tmr0\1;
 */

#ifndef __MACRO_TMR_H__
#define __MACRO_TMR_H__
#include "macro_com.h"

#define TMR_FREQ_HZ                 OSC_DIV_FREQ_HZ
#define TMR_FREQ_HZ_US              OSC_DIV_FREQ_HZ_US

/* Start: Timer 0 -----------------------------------------------------*/
#define tmr0_mode_13()              RCLR(TMOD, TMOD_0_M0_MASK | TMOD_0_M1_MASK)
#define tmr0_mode_16()              PROC(RSET(TMOD, TMOD_0_M0_MASK); RCLR(TMOD, TMOD_0_M1_MASK);)
#define tmr0_mode_8()               PROC(RSET(TMOD, TMOD_0_M1_MASK); RCLR(TMOD, TMOD_0_M0_MASK);)
#define tmr0_job_counter()          RSET(TMOD, TMOD_0_CT_MASK)
#define tmr0_job_timer()            RCLR(TMOD, TMOD_0_CT_MASK)
#define tmr0_gate(enable)           PROC(if (enable) RSET(TMOD, TMOD_0_GATE_MASK); else RCLR(TMOD, TMOD_0_GATE_MASK);)

#define tmr0_mode_13_period_us(period_us)                             \
    PROC(                                                             \
        TH0 = (8192U - (uint16_t)(period_us * TMR_FREQ_HZ_US)) / 32U; \
        TL0 = (8192U - (uint16_t)(period_us * TMR_FREQ_HZ_US)) % 32U;)

#define tmr0_mode_16_period_us(period_us)                                \
    PROC(                                                                \
        TH0 = (65536UL - (uint16_t)(period_us * TMR_FREQ_HZ_US)) / 256U; \
        TL0 = (65536UL - (uint16_t)(period_us * TMR_FREQ_HZ_US)) % 256U;)

#define tmr0_mode_16_period_ms(period_ms) tmr0_mode_16_period_us(period_ms * 1000UL)

#define tmr0_mode_8_period_us(period_us)                    \
    PROC(                                                   \
        TH0 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US); \
        TL0 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US);)


#define tmr0_irq_en(enable)         PROC(if (enable) ET0 = 1; else ET0 = 0;)
#define tmr0_irq_prio(level)        PROC(if (level) PT0 = 1; else PT0 = 0;)
#define tmr0_getf_ovf()             TF0
#define tmr0_clrf_ovf()             (TF0 = 0)
#define tmr0_run()                  (TR0 = 1)
#define tmr0_pause()                (TR0 = 0)
/*------------------------------------------------------- End: Timer 0 */



/* Start: Timer 1 -----------------------------------------------------*/
#define tmr1_mode_13()              RCLR(TMOD, TMOD_1_M0_MASK | TMOD_1_M1_MASK)
#define tmr1_mode_16()              PROC(RSET(TMOD, TMOD_1_M0_MASK); RCLR(TMOD, TMOD_1_M1_MASK);)
#define tmr1_mode_8()               PROC(RSET(TMOD, TMOD_1_M1_MASK); RCLR(TMOD, TMOD_1_M0_MASK);)
#define tmr1_job_counter()          RSET(TMOD, TMOD_1_CT_MASK)
#define tmr1_job_timer()            RCLR(TMOD, TMOD_1_CT_MASK)
#define tmr1_gate(enable)           PROC(if (enable) RSET(TMOD, TMOD_1_GATE_MASK); else RCLR(TMOD, TMOD_1_GATE_MASK);)

#define tmr1_mode_13_period_us(period_us)                             \
    PROC(                                                             \
        TH1 = (8192U - (uint16_t)(period_us * TMR_FREQ_HZ_US)) / 32U; \
        TL1 = (8192U - (uint16_t)(period_us * TMR_FREQ_HZ_US)) % 32U;)

#define tmr1_mode_16_period_us(period_us)                                \
    PROC(                                                                \
        TH1 = (65536UL - (uint16_t)(period_us * TMR_FREQ_HZ_US)) / 256U; \
        TL1 = (65536UL - (uint16_t)(period_us * TMR_FREQ_HZ_US)) % 256U;)

#define tmr1_mode_16_period_ms(period_ms) tmr1_mode_16_period_us(period_ms * 1000UL)

#define tmr1_mode_8_period_us(period_us)                    \
    PROC(                                                   \
        TH1 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US); \
        TL1 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US);)

#define tmr1_irq_en(enable)         PROC(if (enable) ET1 = 1; else ET1 = 0;)
#define tmr1_irq_prio(level)        PROC(if (level) PT1 = 1; else PT1 = 0;)
#define tmr1_getf_ovf()             TF1
#define tmr1_clrf_ovf()             (TF1 = 0)
#define tmr1_run()                  (TR1 = 1)
#define tmr1_pause()                (TR1 = 0)
/*------------------------------------------------------- End: Timer 1 */


/* Start: Timer 0 2x8 Mode --------------------------------------------*/
#define tmr0_mode_2x8()                 RSET(TMOD, TMOD_0_M0_MASK | TMOD_0_M1_MASK)

#define tmrtl0_period_us(period_us)     PROC(TL0 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US);)
#define tmrth0_period_us(period_us)     PROC(TH0 = 256U - (uint8_t)(period_us * TMR_FREQ_HZ_US);)

#define tmrtl0_job_counter()            RSET(TMOD, TMOD_0_CT_MASK)          
#define tmrtl0_job_timer()              RCLR(TMOD, TMOD_0_CT_MASK)
#define tmrtl0_gate(enable)             PROC(if (enable) RSET(TMOD, TMOD_0_GATE_MASK); else RCLR(TMOD, TMOD_0_GATE_MASK);)

#define tmrtl0_getf_ovf()               TF0
#define tmrtl0_clrf_ovf()               (TF0 = 0)
#define tmrtl0_run()                    (TR0 = 1)
#define tmrtl0_pause()                  (TR0 = 0)

#define tmrth0_getf_ovf()               TF1
#define tmrth0_clrf_ovf()               (TF1 = 0)
#define tmrth0_run()                    (TR1 = 1)
#define tmrth0_pause()                  (TR1 = 0)
/*---------------------------------------------- End: Timer 0 2x8 Mode */


#endif // __MACRO_TMR_H__
